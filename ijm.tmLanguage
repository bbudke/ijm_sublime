<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>ijm</string>
	</array>
	<key>name</key>
	<string>ImageJ Macro</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#support</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#special</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.ijm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.ijm</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.ijm</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.ijm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.ijm</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.square</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.ijm</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ijm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.ijm</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ijm</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.ijm</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#leading-space</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-quasi</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-macro-storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-storage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-method-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.ijm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.ijm</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?x)
  [_$a-zA-Z][_$\w]*</string>
							<key>name</key>
							<string>variable.parameter.function.ijm</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameter.function.ijm</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>leading-space</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^(?=(\t|  ))</string>
					<key>end</key>
					<string>(?=[^\t\s])</string>
					<key>name</key>
					<string>meta.leading-tabs</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group1.spaces</string>
								</dict>
								<key>10</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group10.spaces</string>
								</dict>
								<key>11</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group11.spaces</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group2.spaces</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group3.spaces</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group4.spaces</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group5.spaces</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group6.spaces</string>
								</dict>
								<key>7</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group7.spaces</string>
								</dict>
								<key>8</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group8.spaces</string>
								</dict>
								<key>9</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group9.spaces</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(    )(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?(    )?</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group1.tab</string>
								</dict>
								<key>10</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group10.tab</string>
								</dict>
								<key>11</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group11.tab</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group2.tab</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group3.tab</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group4.tab</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group5.tab</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group6.tab</string>
								</dict>
								<key>7</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group7.tab</string>
								</dict>
								<key>8</key>
								<dict>
									<key>name</key>
									<string>meta.even-tab.group8.tab</string>
								</dict>
								<key>9</key>
								<dict>
									<key>name</key>
									<string>meta.odd-tab.group9.tab</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\t)(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?(\t)?</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(function(?:\s*\*|(?=\s|[(])))(?:\s*([a-zA-Z_$][_$\w]*))?\s*</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.ijm</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.ijm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.ijm</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\bvar\b</string>
					<key>name</key>
					<string>storage.type.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\breturn\b</string>
					<key>name</key>
					<string>keyword.control.flow.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(else|if)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(do|for|while|break|continue)\b</string>
					<key>name</key>
					<string>keyword.control.loop.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>!|%|\^|&amp;|\*|/|\-\-|\-|\+\+|\+|~|==|=|!=|&lt;=|&gt;=|&lt;&lt;|&gt;&gt;|&lt;|&gt;|&amp;&amp;|\|\||\*=|/=|\+=|\-=</string>
					<key>name</key>
					<string>keyword.operator.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x)
  \b(
    abs|acos|
    (Array)
      ((\.)(concat|copy|fill|findMinima|findMaxima|getStatistics|print|rankPositions|
      resample|reverse|show|slice|sort|trim))?|
    asin|atan|atan2|autoUpdate|beep|butDepth|calibrate|call|
    changeValues|charCodeAt|close|cos|d2s|
    (Dialog)
      ((\.)(((add)(Message|String|Number|Slider|Checkbox(Group)?|RadioButtonGroup|
      Choice|Help))|create|show|setInsets|((get)(String|Number|Checkbox|Choice|RadioButton))))|
    doCommand|doWand|drawLine|drawOval|drawRect|drawString|dump|endsWith|eval|exec|exit|exp|ext|Ext|
    (File)
      ((\.)(append|close|copy|dateLastModified|delete|directory|exists|(get)(Name|Parent)|
      isDirectory|lastModified|length|makeDirectory|(name)(WithoutExtension)?|(open)(AsString|
      AsRawString|UrlAsString|Dialog)?|rename|saveString|separator))|
    fill|fillOval|fillRect|
    (Fit)
      ((\.)(doFit|rSquared|p|nParams|f|nEquations|getEquation|plot|logResults|showDialog))
    floodFill|floor|fromCharCode|
    (get)
      (Argument|Boolean|BoundingRect|CursorLoc|DateAndTime|Dimensions|Directory|DisplayedArea|
      FileList|Height|Histogram|ImageID|ImageInfo|Info|Line|List|LocationAndSize|Lut|Metadata|
      MinAndMax|Number|Pixel|PixelSize|Profile|RawStatistics|(Result)(String|Label)?|
      (Selection)(Bounds|Coordinates)|SliceNumber|Statistics|String(Width)?|Threshold|
      Time|Title|Value|Version|VoxelSize|Width|Zoom)|
    (IJ)
      ((\.)(deleteRows|getToolName|freeMemory|currentMemory|log|maxMemory|pad|redirectErrorMessages|renameResults))|
    imageCalculator|indexOf|is|isKeyDown|isNaN|isOpen|lastIndexOf|lengthOf|lineTo|
    (List)
      ((\.)(clear|set(Commands|Measurements|List)?|get(List|Value)?|size))|
    log|makeArrow|makeEllipse|makeLine|makeOval|makePoint|makePolygon|makeRectangle|makeSelection|makeText|
    matches|mmaxOf|minOf|moveTo|newArray|newImage|newMenu|nImages|nResults|nSlices|open|
    (Overlay)
      ((\.)(moveTo|lineTo|drawLine|add|setPosition|drawRect|drawEllipse|drawString|show|hide|hidden|remove|
      clear|size|addSelection|activateSelection|moveSelection|removeSelection|copy|paste|drawLabels))|
    parseFloat|parseInt|PI|
    (Plot)
      ((\.)(create|setLimits|setFrameSize|setLogScale(X|Y)|setLineWidth|setColor|add|addText|setJustification|
      drawLine|drawNormalizedLine|show|update|getValues))|
    pow|print|random|rename|replace|requires|reset|resetMinAndMax|resetThreshold|restoreSettings|
    (Roi)
      ((\.)(getBounds|getCoordinates|getDefaultColor|getStrokeColor|getFillColor|getName|getPropert(y|ies)|
      getType|move|setStrokeColor|setFillColor|setName|setStrokeWidth))|
    roiManager|round|run|runMacro|save(As|Settings)?|screenHeight|screenWidth|selectionContains|selectionName|
    selectionType|selectImage|selectWindow|setAutoThreshold|setAutoThreshold|setBackgroundColor|setBatchMode|
    setColor|setFont|setForegroundColor|setJustification|setKeyDown|setLineWidth|setLocation|setLut|setMetadata|
    setMinAndMax|setOption|setPasteMode|setPixel|setResult|setRGBWeights|setSelectionLocation|setSelectionName|
    setSlice|setThreshold|setTool|setupUndo|setVoxelSize|setZCoordinate|showMessage|showMessageWithCancel|
    showProgress|showStatus|showText|sin|snapshot|split|sqrt|
    (Stack)
      ((\.)(isHyperstack|getDimensions|setDimensions|setChannel|setSlice|setFrame|getPosition|setPosition|
      getFrameRate|setFrameRate|getFrameInterval|setFrameInterval|getUnits|setTUnit|setZUnit|setDisplayMode|
      getDisplayMode|setActiveChannels|getActiveChannels|swap|getStatistics))|
    startsWith|
    (String)
      ((\.)(resetBuffer|append|buffer|copy|copyResults|getResultsHeadings|paste|show))|
    substring|tan|toBinary|toHex|toLowerCase|toolID|toScaled|toUnscaled|toString|toUpperCase|updateDisplay|
    updateResults|wait|waitForUser
  )(\b)</string>
					<key>name</key>
					<string>keyword.other.builtin.ijm</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-constant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\btrue\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfalse\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.ijm</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?xi)
  (?:\B[-+])?
  (?:
    (
      \B\.[0-9]+|
      \b[0-9]+(\.[0-9]*)?
    )(e[-+]?[0-9]+)?
  )</string>
					<key>name</key>
					<string>constant.numeric.ijm</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>meta.delimiter.method.period.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\{|\}</string>
					<key>name</key>
					<string>meta.brace.curly.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\(|\)</string>
					<key>name</key>
					<string>meta.brace.round.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[|\]</string>
					<key>name</key>
					<string>meta.brace.square.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\.)\s</string>
					<key>name</key>
					<string>meta.complete.method</string>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.ijm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.ijm</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.ijm</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.ijm</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.ijm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)</string>
					<key>name</key>
					<string>constant.character.escape.ijm</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ijm</string>
	<key>uuid</key>
	<string>54e99b34-ab81-491d-8cc3-21f3ae7369e2</string>
</dict>
</plist>
